openapi: 3.0.0
info:
  title: Vexora API
  description: |
    RESTful API specification for Vexora - A Mood-Based Music Recommendation System
    
    ## Features
    - User authentication (login, register, refresh token)
    - User profile management
    - Facial emotion detection
    - Mood-based music recommendations
    - Music history tracking
    - Playlist management
    
    ## Mood Categories
    - Happy üòä
    - Sad üò¢
    - Angry üò†
    - Neutral/Calm üòê
    
    ## Authentication
    The API uses JWT Bearer token authentication. Include the token in the Authorization header:
    `Authorization: Bearer <your_token>`
    
    ## Cache 
    Cache Time : 30 Minutes
    - To Refresh Cache, Please use Parameter `refresh=true`
  version: 0.0.4
servers:
  - url: http://localhost:5555/api/v1
    description: Local Development Server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login or register endpoints

  schemas:
    TokenData:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token for API authentication
        refresh_token:
          type: string
          description: Token used to obtain new access tokens

    UserProfile:
      type: object
      properties:
        id:
          type: number
          description: Unique user identifier
        profile_picture:
          type: string
          description: URL to user's profile picture
        file_id:
          type: string
          description: ImageKit file ID
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        username:
          type: string
          description: Unique username
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp

    Music:
      type: object
      properties:
        id:
          type: string
        playlist_name:
          type: string
        artist:
          type: string
        path:
          type: string
        thumbnail:
          type: string

    HistoryEntry:
      type: object
      properties:
        uuid:
          type: string
          description: Unique identifier for the history entry
        user_id:
          type: number
          description: User ID associated with the history
        mood:
          type: string
          description: Mood associated with the listening session
        created_at:
          type: string
          format: date-time
          description: When the history entry was created
        music:
          type: null
          example: null
          description: Music data associated with the history entry

    MoodDetectionData:
      type: object
      properties:
        detected_mood:
          type: string
          enum: [ happy, sad, angry, neutral ]
        music:
          type: array
          items:
            $ref: '#/components/schemas/Music'
        created_at:
          type: string
          format: date-time

    RecommendedTrack:
      type: array
      items:
        properties:
          id:
            type: string
            example: "37i9dQZF1DX4WYpdgoIcn6"
          playlist_name:
            type: string
            example: "Chill Hits"
          artist:
            type: string
            example: "Spotify"
          path:
            type: string
            example: "https://open.spotify.com/playlist/37i9dQZF1DX4WYpdgoIcn6"
          thumbnail:
            type: string
            example: "https://i.scdn.co/image/ab67706f00000003b7b3b3b3b3b3b3b3b3b3b3b3"



paths:
  /login:
    post:
      tags:
        - Authentication
      summary: Authenticate user and get tokens
      description: Login with username and password to obtain access and refresh tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: john_doe
                password:
                  type: string
                  format: password
                  example: "********"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "login success!"
                  data:
                    $ref: '#/components/schemas/TokenData'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "invalid username or password"
                  data:
                    type: null

  /register:
    post:
      tags:
        - Authentication
      summary: Create new user account
      description: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - username
                - password
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                username:
                  type: string
                  example: john_doe
                password:
                  type: string
                  format: password
                  example: "********"
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "register success!"
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid input or username/email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "username or email already exists"
                  data:
                    type: null

  /logout:
    post:
      tags:
        - Authentication
      summary: Invalidate access and refresh tokens
      description: Logout and invalidate the access and refresh tokens
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: refresh token obtained from login
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "logout success!"
                  data:
                    type: null

  /refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: |
        Use the refresh token to obtain a new access token without re-authenticating.
        The refresh token is valid for 30 days.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: Refresh token obtained from login or register
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "refresh token success!"
                  data:
                    $ref: '#/components/schemas/TokenData'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "invalid or expired refresh token"
                  data:
                    type: null

  /send-otp:
    post:
      tags:
        - Authentication
      summary: Send OTP for email verification or password reset
      description: Generate and send a one-time password (OTP) to the user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "example@gmail.com"
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "OTP sent successfully!"
                  data:
                    type: null
        '400':
          description: Invalid email or OTP generation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "invalid email or OTP generation failed"
                  data:
                    type: null

  /verify-email:
    post:
      tags:
        - Authentication
      summary: Verify email using OTP
      description: Verify user's email address by validating the one-time password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
              properties:
                email:
                  type: string
                  format: email
                  example: "example@gmail.com"
                otp:
                  type: string
                  description: One-time password received via email
                  example: "123456"
      responses:
        '200':
          description: Email verification successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "email verification success!"
                  data:
                    type: null
        '400':
          description: Invalid OTP or email
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "invalid OTP or email"
                  data:
                    type: null

  /reset-password:
    post:
      tags:
        - Authentication
      summary: Reset user password
      description: Reset password using email and validated OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "example@gmail.com"
                otp:
                  type: string
                  description: One-time password received via email
                  example: "123456"
                password:
                  type: string
                  format: password
                  description: New password for the account
                  example: "newpassword123"
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "password reset success!"
                  data:
                    type: null
        '400':
          description: Invalid OTP, email, or password reset failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "invalid OTP, email, or password reset failed"
                  data:
                    type: null

  /user:
    get:
      tags:
        - User Management
      summary: Get current user profile
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "get profile success!"
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          description: Invalid or expired access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "invalid or expired token"
                  data:
                    type: null

    put:
      tags:
        - User Management
      summary: Update user profile
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Updated full name
                username:
                  type: string
                  description: Updated username
                profile_picture:
                  type: string
                  format: binary
                  description: New profile picture (PNG, JPEG, JPG only)
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "update profile success!"
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "invalid request ...args"
                  data:
                    type: null

  /user/change-password:
    put:
      tags:
        - User Management
      summary: Change user password
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - previous_password
                - new_password
              properties:
                previous_password:
                  type: string
                  format: password
                  description: Current password
                new_password:
                  type: string
                  format: password
                  description: New password
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "change password success!"
                  data:
                    type: null
        '400':
          description: Invalid input or password mismatch
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "current password is incorrect"
                  data:
                    type: null

  /user/profile-picture:
    put:
      tags:
        - User Management
      summary: Update user profile picture
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profile_picture:
                  type: string
                  format: binary
                  description: New profile picture (PNG, JPEG, JPG only)
      responses:
        '200':
          description: Profile picture updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "upload image success!"
                  data:
                    type: null
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "invalid request ...args"
                  data:
                    type: null

  /history:
    get:
      tags:
        - Music History
      summary: Get user's music history
      security:
        - bearerAuth: [ ]
      description: Retrieve all music listening history entries for the authenticated user
      responses:
        '200':
          description: History retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "history retrieved successfully!"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HistoryEntry'

  /history/{id}:
    get:
      tags:
        - Music History
      summary: Get specific history entry with playlist
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the history entry
          schema:
            type: number
      responses:
        '200':
          description: History entry found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "history entry found!"
                  data:
                    $ref: '#/components/schemas/HistoryEntry'
        '404':
          description: History entry not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "history entry not found!"
                  data:
                    type: null

  /spotify/random-playlist:
    get:
      tags:
        - Spotify API
      summary: Get a Random Recommendations
      description: |
        Get a Random Recommendations from the Api Spotify
      responses:
        '200':
          description: Playlist retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      music:
                        type: array
                        items:
                          $ref: '#/components/schemas/Music'

  /spotify/{id}:
    get:
      tags:
        - Spotify API
      summary: Get a specific playlist
      description: |
        Get a specific playlist from the Api Spotify
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the playlist
          schema:
            type: string
      responses:
        '200':
          description: Playlist retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      music:
                        type: array
                        items:
                          $ref: '#/components/schemas/Music'

  /spotify/search:
    get:
      tags:
        - Spotify API
      summary: Search for playlists
      description: |
        Search for playlists on the Spotify API
      parameters:
        - name: search
          in: query
          required: true
          description: Search query
          schema:
            type: string
      responses:
        '200':
          description: Playlists retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      music:
                        type: array
                        items:
                          $ref: '#/components/schemas/Music'

  /mood-detection:
    post:
      tags:
        - Mood Detection
      summary: Detect mood from facial expression and get music recommendations
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - user_id
                - image
              properties:
                user_id:
                  type: number
                  description: ID of the authenticated user
                image:
                  type: string
                  format: binary
                  description: Selfie image file (JPEG, PNG)
      responses:
        '200':
          description: Mood detected and recommendations generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  shouldNotify:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "mood detected successfully!"
                  data:
                    $ref: '#/components/schemas/MoodDetectionData'
        '400':
          description: Invalid input (bad image format)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  shouldNotify:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "invalid request ...args"
                  data:
                    type: null