openapi: 3.1.0
info:
  title: Vexora API
  description: |
    RESTful API specification for Vexora - A Mood-Based Music Recommendation System
    
    ## Features
    - User authentication (login, register, refresh token)
    - User profile management
    - Facial emotion detection
    - Mood-based music recommendations
    - Music history tracking
    - Playlist management
    
    ## Mood Categories
    - Happy üòä
    - Sad üò¢
    - Angry üò†
    - Neutral/Calm üòê
    
    ## Authentication
    The API uses JWT Bearer token authentication. Include the token in the Authorization header:
    `Authorization: Bearer <your_token>`
  version: 1.0.0
  contact:
    name: Vexora Support
    email: ryu4w@gmail.com

servers:
  - url: http://localhost:5555/api/v1
    description: Local Development Server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login or register endpoints

  schemas:
    Error:
      type: object
      properties:
        code:
          type: number
          description: HTTP status code
        status:
          type: string
          description: Error message

    MoodDetectionResponse:
      type: object
      properties:
        code:
          type: number
          description: HTTP status code
        status:
          type: string
          description: Response status message
        data:
          type: object
          properties:
            detected_mood:
              type: string
              enum: [ happy, sad, angry, neutral ]
              description: Detected emotion from facial expression
            confidence_score:
              type: number
              format: float
              description: Confidence level of emotion detection (0-1)
            recommended_tracks:
              type: array
              items:
                type: object
                properties:
                  track_id:
                    type: string
                    description: Spotify track ID
                  name:
                    type: string
                    description: Track name
                  artist:
                    type: string
                    description: Artist name
                  preview_url:
                    type: string
                    description: 30-second preview URL
                  spotify_url:
                    type: string
                    description: Full track URL on Spotify
                  image_url:
                    type: string
                    description: Track album cover URL
            playlist_id:
              type: string
              description: Generated Spotify playlist ID

    TokenResponse:
      type: object
      properties:
        code:
          type: number
          description: HTTP status code
        status:
          type: string
          description: Response status message
        data:
          type: object
          properties:
            accessToken:
              type: string
              description: JWT access token for API authentication
            refresh_token:
              type: string
              description: Token used to obtain new access tokens

    UserProfile:
      type: object
      properties:
        id:
          type: number
          description: Unique user identifier
        profile_picture:
          type: string
          description: URL to user's profile picture
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        username:
          type: string
          description: Unique username
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp

paths:
  /login:
    post:
      tags:
        - Authentication
      summary: Authenticate user and get tokens
      description: Login with username and password to obtain access and refresh tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: john_doe
                password:
                  type: string
                  format: password
                  example: "********"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /register:
    post:
      tags:
        - Authentication
      summary: Create new user account
      description: Register a new user and receive authentication tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - username
                - password
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                username:
                  type: string
                  example: john_doe
                password:
                  type: string
                  format: password
                  example: "********"
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid input or username/email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user:
    get:
      tags:
        - User Management
      summary: Get current user profile
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/UserProfile'
          '401':
            description: Invalid or expired access token
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

    put:
      tags:
        - User Management
      summary: Update user profile
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Updated full name
                email:
                  type: string
                  format: email
                  description: Updated email address
                username:
                  type: string
                  description: Updated username
                profile_picture:
                  type: string
                  format: binary
                  description: New profile picture (PNG, JPEG, JPG only)
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                status: "Invalid input format"
        '401':
          description: Invalid or expired access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/change-password:
    put:
      tags:
        - User Management
      summary: Change user password
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - current_password
                - new_password
              properties:
                current_password:
                  type: string
                  format: password
                  description: Current password
                new_password:
                  type: string
                  format: password
                  description: New password
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid input or password mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid or expired access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /history:
    get:
      tags:
        - Music History
      summary: Get user's music history
      security:
        - bearerAuth: [ ]
      description: Retrieve all music listening history entries for the authenticated user
      responses:
        '200':
          description: History retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: number
                    status:
                      type: string
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: number
                            description: History entry ID
                          user_id:
                            type: number
                            description: User ID associated with the history
                          mood:
                            type: string
                            description: Mood associated with the listening session
                          playlist_name:
                            type: string
                            description: Name of the playlist
                          path:
                            type: string
                            description: URL to the playlist
                          created_at:
                            type: string
                            format: date-time
                            description: When the history entry was created
        '401':
          description: Invalid or expired access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /history/{id}:
    get:
      tags:
        - Music History
      summary: Get specific history entry with playlist
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the history entry
          schema:
            type: number
      responses:
        '200':
          description: History entry found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                      user_id:
                        type: number
                      mood:
                        type: string
                      playlist_name:
                        type: string
                      path:
                        type: string
                      created_at:
                        type: string
                        format: date-time
                      music:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            history_id:
                              type: number
                            music_name:
                              type: string
                            path:
                              type: string
                            thumbnail:
                              type: string
                            artist:
                              type: string
        '401':
          description: Invalid or expired access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: History entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /mood-detection:
    post:
      tags:
        - Mood Detection
      summary: Detect mood from facial expression and get music recommendations
      description: |
        Upload a selfie image to detect emotional state and receive personalized music recommendations.
        The system uses CNN for emotion detection and K-means clustering for music matching.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - user_id
                - image
              properties:
                user_id:
                  type: number
                  description: ID of the authenticated user
                image:
                  type: string
                  format: binary
                  description: Selfie image file (JPEG, PNG)
                genres:
                  type: array
                  items:
                    type: string
                    enum:
                      - pop
                      - rock
                      - hip-hop
                      - r-n-b
                      - classical
                      - jazz
                      - electronic
                      - indie
                      - metal
                      - country
                    description: Preferred music genres for recommendations
                limit:
                  type: integer
                  minimum: 1
                  maximum: 50
                  default: 20
                  description: Maximum number of tracks to recommend
            encoding:
              image:
                contentType:
                  - image/jpeg
                  - image/png
      responses:
        '200':
          description: Mood detected and recommendations generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoodDetectionResponse'
              example:
                code: 200
                status: "success"
                data:
                  detected_mood: "happy"
                  recommended_tracks:
                    - track_id: "spotify:track:123456"
                      name: "Happy Song"
                      artist: "Happy Artist"
                      preview_url: "https://p.scdn.co/mp3-preview/..."
                      spotify_url: "https://open.spotify.com/track/123456"
                      image_url: "https://i.scdn.co/image/..."
                  playlist_id: "spotify:playlist:789xyz"
        '400':
          description: Invalid input (bad image format, invalid genres)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                status: "Invalid image format. Please upload JPEG or PNG file."
        '401':
          description: Invalid or expired access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Face detection failed or unclear emotion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 422
                status: "No face detected in image or emotion unclear. Please try again with a clearer selfie."